eigen(A)
B <- matrix(c(0,1,0, 0,0, 1, rep(0,7), 1/2, 1/2), nrow = 3)
eigen(A)
library(matlib)
A <- matrix(c(1,1,1,1,2,5,7,8), nrow = 4)
B <- matrix(c(1,2,3,3), nrow = 4)
xhat <- inv(t(A) %*% A) %*% t(A) %*% B
xhat
Cov_S <- matrix(c(2382.78, 2611.84, 2136.2, 2611.84, 3106.47, 2553.90, 2136.2, 2553.9,
2650.71), nrow = 3)
E <- eigen(Cov_S)
E$values[1] / sum(E$values)
E$values[2] / sum(E$values)
E$values[3] / sum(E$values)
library(stats)
d = longley[, -c(6,7)]
dPCA = prcomp(d, scale = TRUE)
plot(dPCA, type = "l")
#plot(dPCA)
#predict is used to find the new corrdinates using the eigen vectors of the original dataset
predict(dPCA, newdata = d)
biplot(dPCA)
dPCA3 <- princomp(d, cor = TRUE, scores = TRUE)
summary(dPCA3)
library(caret)
dPCA2 <- preProcess(d, method = c("center", "scale", "pca"), thresh = 0.9, pcaComp = 3)
predict(dPCA2, newdata = d)
library(MASS)
A <- matrix(c(6,-2,1,-2,6,-1,-1,-1,5 ), nrow = 3)
D <- eigen(A)
D$values
D$vectors
D$vectors %*% diag(D$values) %*% ginv(D$vectors)
Aa <- matrix(c(4, 8, 11, 7, 14, -2), nrow =2)
covar <- ginv(Aa) %*% A
# Define matrices Aa and A
Aa <- matrix(c(4, 8, 11, 7, 14, -2), nrow = 2)
A <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2)
# Calculate the generalized inverse of Aa
ginv_Aa <- ginv(Aa)
# Check the dimensions of ginv_Aa
dim(ginv_Aa)
# Multiply the generalized inverse by matrix A
result <- ginv_Aa %*% A
# Display the result
print(result)
A <- matrix(c(-18, 2, -14, -2, 13, 19, 11, 21, -4, -4, -12, 4, 4, 12, 8, 8), nrow = 4)
svd(A)
pnorm(-2.65)
9.6 - sqrt(40)
(28.6 - 31) / (9.6 / sqrt(40))
2* pnorm(-1.58)
2* pnorm(11.85, mean = 12, sd = 0.5/sqrt(100))
library(BSDA)
attach(Anxiety)
m <- lm(math ~ anxiety)
plot(anxiety, math)
abline(m)
summary(m)$r.squared
residual <- resid(m)
plot(anxiety, residual, ylab = "Residual", abline(0,0, col = "red"))
x <- seq(0, 10)
p <- dbinom(x, size = 10, prob = 0.3)
plot(x, p, type = "h", lwd = 5, main = "probability of getting x heads in 10 tosses", xlab = "# of heads", ylab = "P(X= x)")
# the probability mass function (PMF) is
p
sample <- rbinom(n = 10000, size = 10, p = 0.3)
hist(sample, main = "Histogram of samples from Binomial", col = "royal blue", right = FALSE)
m = mean(sample)
s = sd(sample)
p = seq(0.05, 1, 0.1)
prior = c(0.005, 0.01, 0.9, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.005 )
L = p^4 *(1-p)^6
posterior = L * prior
normalized_posterior = posterior / sum(posterior)
plot(p, posterior, ylab = "Posterior Probability", lwd = 10, type = "h")
library(e1071)
tr = read.csv('soccerData2.csv')
library(e1071)
tr = read.csv('soccerData2.csv')
summary(tr)
model = naiveBayes(Play ~., data = tr); model
test = data.frame(Temperature = "Mild", Wind = "Weak", Precipitation = "Rain", Humidity = "High")
sapply(test, levels)
trLevels = sapply(tr, levels)
#all levels for the test set must be equal to the training set
for (i in 1:4){
test[[i]]= factor(test[[i]], levels = trLevels[[i]])
}
output = predict(model, test, "class"); output
output = predict(model, test, "raw"); output
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stats)
suppressWarnings(library(knitr))
suppressWarnings(library(readr))
Happiness <- read_csv("./WHR2018.csv")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stats)
library(shiny)
suppressWarnings(library(knitr))
suppressWarnings(library(readr))
Happiness <- read_csv("./WHR2018.csv")
# Define the UI
ui <- fluidPage(
titlePanel("Happienss Index Distribution - 2015, 2016, 2017"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Input for selecting a variable
selectInput("variable", "Select a Variable:", choices = colnames(H2018))
),
# Main panel for displaying the histogram
mainPanel(
plotOutput("histogram")
)
)
)
H2018 <- Happiness[, 1:9]
# Define the UI
ui <- fluidPage(
titlePanel("Happienss Index Distribution - 2015, 2016, 2017"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Input for selecting a variable
selectInput("variable", "Select a Variable:", choices = colnames(H2018))
),
# Main panel for displaying the histogram
mainPanel(
plotOutput("histogram")
)
)
)
# Define the server
server <- function(input, output) {
# Render the histogram based on the selected variable
output$histogram <- renderPlot({
# Check if a variable is selected
if (is.null(input$variable)) {
return(NULL)
}
# Create the histogram
hist(H2018[, input$variable],
main = paste("Histogram of", input$variable),
xlab = input$variable,
col = "blue",
border = "black")
})
}
# Create the Shiny app
shinyApp(ui = ui, server = server)
H2017 <-  Happiness %>% filter(year == 2017)
# Define the UI
ui <- fluidPage(
titlePanel("Happienss Index Distribution - 2017"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Input for selecting a variable
selectInput("variable", "Select a Variable:", choices = H2017$`Life Ladder`)
),
# Main panel for displaying the histogram
mainPanel(
plotOutput("histogram")
)
)
)
# Define the server
server <- function(input, output) {
# Render the histogram based on the selected variable
output$histogram <- renderPlot({
# Check if a variable is selected
if (is.null(input$variable)) {
return(NULL)
}
# Create the histogram
hist(H2018[, input$variable],
main = paste("Histogram of", input$variable),
xlab = input$variable,
col = "blue",
border = "black")
})
}
# Create the Shiny app
shinyApp(ui = ui, server = server)
H2017 <-  Happiness %>% filter(year == 2017)
H2017 <- H2017[, 1:10]
# Define the UI
ui <- fluidPage(
titlePanel("Happienss Index Distribution - 2017"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Input for selecting a variable
selectInput("variable", "Select a Variable:", choices = H2017$`Life Ladder`)
),
# Main panel for displaying the histogram
mainPanel(
plotOutput("histogram")
)
)
)
# Define the server
server <- function(input, output) {
# Render the histogram based on the selected variable
output$histogram <- renderPlot({
# Check if a variable is selected
if (is.null(input$variable)) {
return(NULL)
}
# Create the histogram
hist(H2017[, input$variable],
main = paste("Histogram of", input$variable),
xlab = input$variable,
col = "blue",
border = "black")
})
}
# Create the Shiny app
shinyApp(ui = ui, server = server)
H2017 <-  Happiness %>% filter(year == 2017)
H2017 <- H2017[, 1:10]
# Define the UI
ui <- fluidPage(
titlePanel("Happienss Index Distribution - 2017"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Input for selecting a variable
selectInput("variable", "Select a Variable:", choices = H2017$`country`)
),
# Main panel for displaying the histogram
mainPanel(
plotOutput("histogram")
)
)
)
# Define the server
server <- function(input, output) {
# Render the histogram based on the selected variable
output$histogram <- renderPlot({
# Check if a variable is selected
if (is.null(input$variable)) {
return(NULL)
}
# Create the histogram
hist(H2017[, input$variable],
main = paste("Histogram of", input$variable),
xlab = input$variable,
col = "blue",
border = "black")
})
}
# Create the Shiny app
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stats)
library(shiny)
library(rsconnect)
install.packages("rsconnect")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stats)
library(shiny)
library(rsconnect)
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stats)
library(shiny)
library(rsconnect)
install.packages("rsconnect")
install.packages("rsconnect")
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
install.packages("magrittr")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stats)
library(shiny)
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stats)
library(shiny)
library(rsconnect)
suppressWarnings(library(knitr))
suppressWarnings(library(readr))
install.packages("readr")
knitr::opts_chunk$set(echo = TRUE)
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stats)
library(shiny)
library(rsconnect)
suppressWarnings(library(knitr))
suppressWarnings(library(readr))
Happiness <- read_csv("./WHR2018.csv")
H2017 <-  Happiness %>% filter(year == 2017)
H2017 <- H2017[, 1:10]
# Define the UI
ui <- fluidPage(
titlePanel("Happienss Index Distribution - 2017"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Input for selecting a variable
selectInput("variable", "Select a Variable:", choices = H2017[, 1:2])
),
# Main panel for displaying the histogram
mainPanel(
plotOutput("histogram")
)
)
)
# Define the server
server <- function(input, output) {
# Render the histogram based on the selected variable
output$histogram <- renderPlot({
# Check if a variable is selected
if (is.null(input$variable)) {
return(NULL)
}
# Create the histogram
hist(H2017[, input$`Life Ladder`,
main = paste("Histogram of", input$`Life Ladder`),
xlab = input$variable,
col = "blue",
border = "black")
H2017 <-  Happiness %>% filter(year == 2017)
H2017 <- H2017[, 1:10]
# Filter the data for the year 2017
H2017 <- Happiness %>% filter(year == 2017)
# Define the UI
ui <- fluidPage(
titlePanel("Happiness Index Distribution - 2017"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Input for selecting a variable
selectInput("variable", "Select a Variable:", choices = colnames(H2017)[1:2])
),
# Main panel for displaying the histogram
mainPanel(
plotOutput("histogram")
)
)
)
# Define the server
server <- function(input, output) {
# Render the histogram based on the selected variable
output$histogram <- renderPlot({
# Check if a variable is selected
if (is.null(input$variable)) {
return(NULL)
}
# Create the histogram
hist(H2017[, input$variable],
main = paste("Histogram of", input$variable),
xlab = input$variable,
col = "blue",
border = "black")
})
}
# Create the Shiny app
shinyApp(ui = ui, server = server)
# Filter the data for the year 2017
H2017 <-  Happiness %>% filter(year == 2017)
H2017 <- H2017[, 1:10]
# Define the UI
ui <- fluidPage(
titlePanel("Happiness Index Distribution - 2017"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Input for selecting a variable
selectInput("variable", "Select a Variable:", choices = colnames(H2017)[1:2])
),
# Main panel for displaying the histogram
mainPanel(
plotOutput("histogram")
)
)
)
# Define the server
server <- function(input, output) {
# Render the histogram based on the selected variable
output$histogram <- renderPlot({
# Check if a variable is selected
if (is.null(input$variable) || input$variable == "") {
return(NULL)
}
# Create the histogram
hist(H2017[, input$variable],
main = paste("Histogram of", input$variable),
xlab = input$variable,
col = "blue",
border = "black")
})
}
# Create the Shiny app
shinyApp(ui = ui, server = server)
# Filter the data for the year 2017
H2017 <-  Happiness %>% filter(year == 2017)
H2017 <- H2017[, 1:10]
# Define the UI
ui <- fluidPage(
titlePanel("Happiness Index Distribution - 2017"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Input for selecting a variable
selectInput("variable", "Select a Variable:", choices = colnames(H2017)[3])
),
# Main panel for displaying the histogram
mainPanel(
plotOutput("histogram")
)
)
)
# Define the server
server <- function(input, output) {
# Render the histogram based on the selected variable
output$histogram <- renderPlot({
# Check if a variable is selected
if (is.null(input$variable) || input$variable == "") {
return(NULL)
}
# Create the histogram
hist(H2017[, input$variable],
main = paste("Histogram of", input$variable),
xlab = input$variable,
col = "blue",
border = "black")
})
}
# Create the Shiny app
shinyApp(ui = ui, server = server)
# Filter the data for the year 2017
H2017 <-  Happiness %>% filter(year == 2017)
H2017 <- H2017[, 1:10]
# Define the UI
ui <- fluidPage(
titlePanel("Happiness Index Distribution - 2017"),
# Sidebar layout with input and output definitions
sidebarLayout(
sidebarPanel(
# Input for selecting a variable
selectInput("variable", "Select a Variable:", choices = colnames(H2017)[1:2])
),
# Main panel for displaying the histogram
mainPanel(
plotOutput("histogram")
)
)
)
# Define the server
server <- function(input, output) {
# Render the histogram based on the selected variable
output$histogram <- renderPlot({
# Check if a variable is selected
if (is.null(input$variable) || input$variable == "") {
return(NULL)
}
# Create the histogram
hist(H2017[, input$variable],
main = paste("Histogram of", input$variable),
xlab = input$variable,
col = "blue",
border = "black")
})
}
# Create the Shiny app
shinyApp(ui = ui, server = server)
